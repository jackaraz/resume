{% set assetHash = helpers.random() %}

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- TODO: Include relevant metadata -->
    {# see https://www.filamentgroup.com/lab/async-css.html for media="print" explanation #}
    <link rel="stylesheet" media="print" href="/fonts/fonts.css?{{ assetHash }}" onload="this.media='all'" />
    <link rel="stylesheet" media="print" href="/css/themes.css?{{ assetHash }}" onload="this.media='all'" />
    <link rel="stylesheet" media="print" href="/css/main.css?{{ assetHash }}" onload="this.media='all'" />
    <title>{{ site.title }}</title>
     <script>(localStorage.getItem('theme')) && document.documentElement.setAttribute('data-theme', localStorage.getItem('theme'))</script>
  </head>
  <body class="h-resume | sidebar-grid">
    <button class="js-themepicker-themeselect" data-theme="default">Office</button>
    <button class="js-themepicker-themeselect" data-theme="shire">Shire</button>
    <button class="js-themepicker-themeselect" data-theme="galaxy">Galaxy</button>
      {% include "partials/aside.njk" %}
      {% include "partials/header.njk" %}
      {% include "partials/main.njk" %}
  </body>
  <script>

const THEME_STORAGE_KEY = 'theme'

class ThemePicker {
    constructor() {
        this.activeTheme = 'default'
        this.hasLocalStorage = typeof Storage !== 'undefined'
        this.themeSelectBtns = Array.from(
            document.querySelectorAll('.js-themepicker-themeselect')
        )
        this.svg = document.getElementById('photo__themes')

        this.init()
    }

    init() {
        const systemPreference = this.getSystemPreference()
        const storedPreference = this.getStoredPreference()

        if (storedPreference) {
            this.activeTheme = storedPreference
        } else if (systemPreference) {
            this.activeTheme = systemPreference
        }

        this.bindEvents()
        this.setTheme(this.activeTheme)
    }

    bindEvents() {
        this.themeSelectBtns.forEach((btn) => {
            const id = btn.dataset.theme
            if (id) {
                btn.addEventListener('click', () => this.setTheme(id))
            }
        })
    }

    getSystemPreference() {
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark'
        }
        return false
    }

    getStoredPreference() {
        if (this.hasLocalStorage) {
            return localStorage.getItem(THEME_STORAGE_KEY)
        }
        return false
    }
    

    setTheme(id) {
        this.activeTheme = id
        document.documentElement.setAttribute('data-theme', id)

        {# change viewport for photo overlay (TODO: put this somewhere better) #}
        const pans = {
            galaxy: 840,
            shire: 4120,
            default: 2500
        };

        this.svg.setAttribute('viewBox', `${pans[id]} -50 450 2376`)


        if (this.hasLocalStorage) {
            localStorage.setItem(THEME_STORAGE_KEY, id)
        }
    }
}

if (window.CSS && CSS.supports('color', 'var(--fake-var)')) {
    new ThemePicker()
}
  </script>
</html>
